#include <iostream>
#include <stdlib.h>
#include <time.h>
#include "../include/algorithm.h"
using namespace std;
#define MAX_VAL 1000000
#define MAX_TREE_HEIGHT 1

#define BASIC_VALUE 300

#define CAP_VAL 10
#define LEFT_VAL 10
#define CAP3_BONUS 25
#define SAME_NEARBY_VAL 10

#define ENEMY_CRITICAL_NEAR_VALUE 90
#define ENEMY_CRITICAL_NEAR_VALUE_CAP3_BONUS 10
#define NEARBY_ENE_MORE_VALUE 30
#define NEARBY_SELF_MORE_VALUE 100

#define CRITICAL_VALUE 50

int r = 0;
int max_tree_height = 0;



// true = max, false = min
int choose_cell(Board board, int& row, int& col, Player *player, bool m, int step);

void virtual_place_orb(Board& board, int r, int c, Player* player, char color, bool m);

int evaluate(Board board, char pre_color, char next_color, bool m);

int Cell_Val(Board board, int i, int j, char pre_color, char next_color, bool ene);


int ene_nearby_value(Board board, int i, int j, int p, int q, bool ene);
int same_nearby_value(Board board, int i, int j, int p, int q, bool ene);

int ratio_of_cell(Board board, int i, int j);
bool critical(Board board, int i, int j);
bool in_board(int i, int j);
bool win(Board board, char pre_color, char next_color);


void algorithm_A(Board board, Player player, int index[]) {
	//r++;
	//max_tree_height = (r/10);
	//if (max_tree_height > MAX_TREE_HEIGHT) 
		max_tree_height = MAX_TREE_HEIGHT;
	int row, col;
	char color = player.get_color();
	//得出一個結果出來 並改變r c (ref)
	choose_cell(board, row, col, &player, true, 0);

	index[0] = row, index[1] = col;
}


int choose_cell(Board b, int& r, int& c, Player *p, bool m, int step) {

	//m = true : 我下玩了 對方 evaluate
	//m = false : 對方下玩了 我 evaluate

	Board tmp_board;
	char color = p->get_color();

	char ene_color;

	// max pre = my ; next = ene;
	if (m) {
		if (color == 'r') ene_color = 'b';
		else ene_color = 'r';
	}
	else {
		if (color == 'r') {
			color = 'b';
			ene_color = 'r';
		}
		else {
			ene_color = 'b';
			color = 'r';
		}
	}

	//color = 下棋方的顏色 ; ene_color = evalute 方的顏色


	int total_val[5][6];
	int fin_val;
	if (m) fin_val = -MAX_VAL - 1;
	else fin_val = MAX_VAL + 1;
	int fin_val_row;
	int fin_val_col;
	int tmp_row;
	int tmp_col;


	for (int i = 0; i < ROW; i++) {
		for (int j = 0; j < COL; j++) {

			tmp_board = b;

			if (b.get_cell_color(i, j) == color || b.get_cell_color(i, j) == 'w') {

				virtual_place_orb(tmp_board, i, j, p, color, m);

				// 如果下了然後贏了
				if (win(tmp_board, color, ene_color)) {
					if (m)
						total_val[i][j] = MAX_VAL;
					else
						total_val[i][j] = -MAX_VAL;
				}
			else{
				if (step >= max_tree_height)
					if (m)
						total_val[i][j] = evaluate(tmp_board, color, ene_color, m);
					else
						total_val[i][j] = 0 - evaluate(tmp_board, color, ene_color, m);
				else
					total_val[i][j] = choose_cell(tmp_board, tmp_row, tmp_col, p, !m, step + 1);
			}

				if (m) {
					if (total_val[i][j] > fin_val) {
						fin_val = total_val[i][j];
						fin_val_row = i;
						fin_val_col = j;
					}
				}
				else {
					if (total_val[i][j] < fin_val) {
						fin_val = total_val[i][j];
						fin_val_row = i;
						fin_val_col = j;
					}
				}
			}
			else continue;

		}
	}

	r = fin_val_row;
	c = fin_val_col;

	return fin_val;
}


// pre_color代表之前下的是誰 ; now_color代表下個下的是誰
// evaluate 判斷的是 pre_color 下完後 , next_color 下之前 的 value
// 可藉此判斷 pre_color 下的這步所造成的   """ 對於對方來說的整盤value """  好不好
int evaluate(Board board, char pre_color, char next_color, bool m) {

	int cell_val[ROW][COL];
	int board_total_val = 0;
	bool win = true;
	for (int i = 0; i < ROW; i++) {
		for (int j = 0; j < COL; j++) {
			cell_val[i][j] = 0;

			if (board.get_cell_color(i, j) == 'w') continue;		//如果空白就 = 0

			//自己的cell
			if (board.get_cell_color(i, j) == pre_color) {
				//if (win &&  i == ROW - 1 && j == COL - 1) return MAX_VAL;
				cell_val[i][j] += Cell_Val(board, i, j, pre_color, next_color, (false));
			}
			//ene的cell
			if (board.get_cell_color(i, j) == next_color) {
				win = false;
				cell_val[i][j] -= Cell_Val(board, i, j, next_color, pre_color, (false));
			}
			board_total_val += cell_val[i][j];
		}
	}
	return board_total_val;
}



int Cell_Val(Board board, int i, int j, char this_color, char that_color, bool flag) {

	int cur_orb_num = board.get_orbs_num(i, j);
	int cur_cap = board.get_capacity(i, j);

	//************************basic value***************************

	//越多格越好
	int cell_value = BASIC_VALUE;
	//爆炸範圍越小越好
	cell_value += CAP_VAL * (8 - cur_cap);
	if (cur_cap == 3) cell_value += CAP3_BONUS;
	//剩餘爆炸數量越少越好
	cell_value += LEFT_VAL * (8 - (cur_cap - cur_orb_num));

	//************************ neighbor cell ***************************

	//大於 or 小於 隔壁的orb數量 (可疊加)
	//上 左上 左 左下 下 右下 右 右上

	//如果小於隔壁的 那val就 - 自己的orb_num(因為會被吃掉)
	//越多比自己大的隔壁cell 就 - 越多(但越多cell 就減的越少)

	//如果必比隔壁多 就 +=對方的orb_num

	if (in_board(i - 1, j)) {

		if (board.get_cell_color(i - 1, j) == that_color)
			cell_value += ene_nearby_value(board, i, j, -1, 0, flag);

		else if (board.get_cell_color(i - 1, j) == this_color)
			cell_value += same_nearby_value(board, i, j, -1, 0, flag);
	}

	if (in_board(i - 1, j - 1)) {

		if (board.get_cell_color(i - 1, j - 1) == that_color)
			cell_value += ene_nearby_value(board, i, j, -1, -1, flag);

		else if (board.get_cell_color(i - 1, j - 1) == this_color)
			cell_value += same_nearby_value(board, i, j, -1, -1, flag);
	}

	if (in_board(i, j - 1)) {

		//cout << "             before" << cell_value << endl;

		if (board.get_cell_color(i, j - 1) == that_color)
			cell_value += ene_nearby_value(board, i, j, 0, -1, flag);

		else if (board.get_cell_color(i, j - 1) == this_color)
			cell_value += same_nearby_value(board, i, j, 0, -1, flag);
	
		//cout << "             after" << cell_value << endl;

	}

	if (in_board(i + 1, j - 1)) {

		if (board.get_cell_color(i + 1, j - 1) == that_color)
			cell_value += ene_nearby_value(board, i, j, 1, -1, flag);

		else if (board.get_cell_color(i + 1, j - 1) == this_color)
			cell_value += same_nearby_value(board, i, j, 1, -1, flag);
	}

	if (in_board(i + 1, j)) {

		if (board.get_cell_color(i + 1, j) == that_color)
			cell_value += ene_nearby_value(board, i, j, 1, 0, flag);

		else if (board.get_cell_color(i + 1, j) == this_color)
			cell_value += same_nearby_value(board, i, j, 1, 0, flag);
	}

	if (in_board(i + 1, j + 1)) {

		if (board.get_cell_color(i + 1, j + 1) == that_color)
			cell_value += ene_nearby_value(board, i, j, 1, 1, flag);

		else if (board.get_cell_color(i + 1, j + 1) == this_color)
			cell_value += same_nearby_value(board, i, j, 1, 1, flag);
	}

	if (in_board(i, j + 1)) {

		if (board.get_cell_color(i, j + 1) == that_color)
			cell_value += ene_nearby_value(board, i, j, 0, 1, flag);

		else if (board.get_cell_color(i, j + 1) == this_color)
			cell_value += same_nearby_value(board, i, j, 0, 1, flag);
	}

	if (in_board(i - 1, j + 1)) {

		if (board.get_cell_color(i - 1, j + 1) == that_color)
			cell_value += ene_nearby_value(board, i, j, -1, 1, flag);

		else if (board.get_cell_color(i - 1, j + 1) == this_color)
			cell_value += same_nearby_value(board, i, j, -1, 1, flag);
	}


	//************************critical value***************************

	//可爆最好
	if (critical(board, i, j)) cell_value += CRITICAL_VALUE;

	return cell_value;

}

int ene_nearby_value(Board board, int i, int j, int p, int q, bool flag) {


	// flag 代表這顆棋子critical & 隔壁棋子critical 誰比較有優勢
	// falg == true 代表 隔壁critical 對自己有利(自己先攻)

	int nv = 0;
	//cout << "at: "<<"( "<<i<<" , "<<j<<" )" << endl;
	//cout << "with: " << "( " << i+p << " , " << j+q << " )" << endl;
	
		if (board.get_orbs_num(i+p, j+q) - board.get_capacity(i+p, j+q)
			>= board.get_orbs_num(i, j) - board.get_capacity(i, j)) {
			nv -= NEARBY_ENE_MORE_VALUE;
			if (critical(board, i + p, j + q) && critical(board, i, j)) {
				nv -= ENEMY_CRITICAL_NEAR_VALUE;
				if (board.get_capacity(i, j) == 3)
					nv -= ENEMY_CRITICAL_NEAR_VALUE_CAP3_BONUS;
			}
		}
		else {
			nv += NEARBY_SELF_MORE_VALUE;
		}
		//cout << "nv : " << nv << endl;
	
	return nv;
}

int same_nearby_value(Board board, int i, int j, int p, int q, bool ene) {
	int nv = 0;
	nv -= SAME_NEARBY_VAL;
	return nv;
}


void virtual_place_orb(Board& board, int i, int j, Player* player, char color, bool m) {
	if (m)
		board.place_orb(i, j, player);
	else {
		Player * ene_player = new Player(color);
		board.place_orb(i, j, ene_player);
		delete ene_player;
	}
}

bool win(Board board, char pre_color, char next_color) {

	for (int i = 0; i < ROW; i++) {
		for (int j = 0; j < COL; j++) {
			if (board.get_cell_color(i, j) == pre_color || board.get_cell_color(i, j) == 'w') continue;
			else
				return false;
		}
	}
	return true;
}

bool in_board(int i, int j) {
	if (i >= ROW || i < 0 || j >= COL || j < 0)
		return false;
	else return true;
}

int ratio_of_cell(Board b, int i, int j) {
	return  b.get_orbs_num(i, j) - b.get_capacity(i, j);
}

bool critical(Board board, int i, int j) {
	return (board.get_capacity(i, j) - board.get_orbs_num(i, j)) == 1;
}

